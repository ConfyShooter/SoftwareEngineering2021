package it.unisa.diem.Gruppo20.Model;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

/**
 * This class allows the Variable managment.
 * @author Gruppo20
 */
public class Variables {
    private Map<Character, Complex> data;
    private Deque<Map<Character, Complex>> backupsStack;

    public Variables(Map<Character, Complex> data, Deque<Map<Character, Complex>> backupsStack) {
        this.data = data;
        this.backupsStack = backupsStack;
    }

    /**
     * Create an object of this class.
     * An HashMap is used to save Complex numbers corresponding to a letter in the range [a-z].
     * An ArrayDeque is used to save and restore the map.
     */
    public Variables() {
        this(new HashMap<>(), new ArrayDeque<>());
    }

    public Map<Character, Complex> getCurrentValues() {
        return data;
    }
    /**
     * This method get the Complex number corresponding to the key c inside the map.
     * 
     * @param c is the key of the map.
     * @return Complex Object corresponding to the key c.
     * 
     * @throws RuntimeException if the key is not valid or is not contained inside the map.
     */
    public Complex getVariable(char c) throws RuntimeException {
        checkKey(""+c);
        if(!data.containsKey(c))
            throw new RuntimeException("There isn't a Complex number associated to the the key "+ c);
        return data.get(c);
    }
    
    /**
     * This method set the Complex number passed as param as value of the variable c.
     * 
     * @param c is the key of the map.
     * @param number is the Complex Object that we want to insert in the variable c.
     * 
     * @throws RuntimeException if the key is not valid.
     */
    public void setVariable(char c, Complex number) throws RuntimeException {
        checkKey(""+c);
        data.put(c, number);
    }
    
    /**
     * This method sum the Complex number passed as param to the value of the variable c
     * and store the sum result as value of the variable c.
     * 
     * @param c is the key of the map.
     * @param number is the Complex Object that we want to sum to the variable c.
     * 
     * @throws RuntimeException if the key is not valid or is not contained inside the map.
     */
    public void sumVariable(char c, Complex number) throws RuntimeException {
        Complex actual = getVariable(c);
        Complex result = actual.plus(number);
        setVariable(c, result);
    }
    
    /**
     * This method subtract the Complex number passed as param to the value of the variable c
     * and store the subtract result as value of the variable c.
     * 
     * @param c is the key of the map.
     * @param number is the Complex Object that we want to subtract to the variable c.
     * 
     * @throws RuntimeException if the key is not valid or is not contained inside the map.
     */
    public void subVariable(char c, Complex number) throws RuntimeException {
        Complex actual = getVariable(c);
        Complex result = actual.minus(number);
        setVariable(c, result);
    }
    
    public void backup() {
        ;
    }
    
    public void restore() {
        ;
    }
    
    private void checkKey(String s) throws RuntimeException{
        String key = s.toLowerCase();
        if(!key.matches("[a-z]{1}"))
            throw new RuntimeException("Error generated by an operation on variable with key" + key);
    }
}
